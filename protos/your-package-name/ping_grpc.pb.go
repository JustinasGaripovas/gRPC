// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: ping.proto

package your_package_name

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthCheckClient is the client API for HealthCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthCheckClient interface {
	PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	PingsPong(ctx context.Context, opts ...grpc.CallOption) (HealthCheck_PingsPongClient, error)
	PingPongs(ctx context.Context, in *Ping, opts ...grpc.CallOption) (HealthCheck_PingPongsClient, error)
	PingsPongs(ctx context.Context, opts ...grpc.CallOption) (HealthCheck_PingsPongsClient, error)
}

type healthCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthCheckClient(cc grpc.ClientConnInterface) HealthCheckClient {
	return &healthCheckClient{cc}
}

func (c *healthCheckClient) PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/healthCheck.HealthCheck/PingPong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckClient) PingsPong(ctx context.Context, opts ...grpc.CallOption) (HealthCheck_PingsPongClient, error) {
	stream, err := c.cc.NewStream(ctx, &HealthCheck_ServiceDesc.Streams[0], "/healthCheck.HealthCheck/PingsPong", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthCheckPingsPongClient{stream}
	return x, nil
}

type HealthCheck_PingsPongClient interface {
	Send(*Ping) error
	CloseAndRecv() (*Pong, error)
	grpc.ClientStream
}

type healthCheckPingsPongClient struct {
	grpc.ClientStream
}

func (x *healthCheckPingsPongClient) Send(m *Ping) error {
	return x.ClientStream.SendMsg(m)
}

func (x *healthCheckPingsPongClient) CloseAndRecv() (*Pong, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Pong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *healthCheckClient) PingPongs(ctx context.Context, in *Ping, opts ...grpc.CallOption) (HealthCheck_PingPongsClient, error) {
	stream, err := c.cc.NewStream(ctx, &HealthCheck_ServiceDesc.Streams[1], "/healthCheck.HealthCheck/PingPongs", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthCheckPingPongsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HealthCheck_PingPongsClient interface {
	Recv() (*Pong, error)
	grpc.ClientStream
}

type healthCheckPingPongsClient struct {
	grpc.ClientStream
}

func (x *healthCheckPingPongsClient) Recv() (*Pong, error) {
	m := new(Pong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *healthCheckClient) PingsPongs(ctx context.Context, opts ...grpc.CallOption) (HealthCheck_PingsPongsClient, error) {
	stream, err := c.cc.NewStream(ctx, &HealthCheck_ServiceDesc.Streams[2], "/healthCheck.HealthCheck/PingsPongs", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthCheckPingsPongsClient{stream}
	return x, nil
}

type HealthCheck_PingsPongsClient interface {
	Send(*Ping) error
	Recv() (*Pong, error)
	grpc.ClientStream
}

type healthCheckPingsPongsClient struct {
	grpc.ClientStream
}

func (x *healthCheckPingsPongsClient) Send(m *Ping) error {
	return x.ClientStream.SendMsg(m)
}

func (x *healthCheckPingsPongsClient) Recv() (*Pong, error) {
	m := new(Pong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HealthCheckServer is the server API for HealthCheck service.
// All implementations must embed UnimplementedHealthCheckServer
// for forward compatibility
type HealthCheckServer interface {
	PingPong(context.Context, *Ping) (*Pong, error)
	PingsPong(HealthCheck_PingsPongServer) error
	PingPongs(*Ping, HealthCheck_PingPongsServer) error
	PingsPongs(HealthCheck_PingsPongsServer) error
	mustEmbedUnimplementedHealthCheckServer()
}

// UnimplementedHealthCheckServer must be embedded to have forward compatible implementations.
type UnimplementedHealthCheckServer struct {
}

func (UnimplementedHealthCheckServer) PingPong(context.Context, *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}
func (UnimplementedHealthCheckServer) PingsPong(HealthCheck_PingsPongServer) error {
	return status.Errorf(codes.Unimplemented, "method PingsPong not implemented")
}
func (UnimplementedHealthCheckServer) PingPongs(*Ping, HealthCheck_PingPongsServer) error {
	return status.Errorf(codes.Unimplemented, "method PingPongs not implemented")
}
func (UnimplementedHealthCheckServer) PingsPongs(HealthCheck_PingsPongsServer) error {
	return status.Errorf(codes.Unimplemented, "method PingsPongs not implemented")
}
func (UnimplementedHealthCheckServer) mustEmbedUnimplementedHealthCheckServer() {}

// UnsafeHealthCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthCheckServer will
// result in compilation errors.
type UnsafeHealthCheckServer interface {
	mustEmbedUnimplementedHealthCheckServer()
}

func RegisterHealthCheckServer(s grpc.ServiceRegistrar, srv HealthCheckServer) {
	s.RegisterService(&HealthCheck_ServiceDesc, srv)
}

func _HealthCheck_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthCheck.HealthCheck/PingPong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServer).PingPong(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheck_PingsPong_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HealthCheckServer).PingsPong(&healthCheckPingsPongServer{stream})
}

type HealthCheck_PingsPongServer interface {
	SendAndClose(*Pong) error
	Recv() (*Ping, error)
	grpc.ServerStream
}

type healthCheckPingsPongServer struct {
	grpc.ServerStream
}

func (x *healthCheckPingsPongServer) SendAndClose(m *Pong) error {
	return x.ServerStream.SendMsg(m)
}

func (x *healthCheckPingsPongServer) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HealthCheck_PingPongs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Ping)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HealthCheckServer).PingPongs(m, &healthCheckPingPongsServer{stream})
}

type HealthCheck_PingPongsServer interface {
	Send(*Pong) error
	grpc.ServerStream
}

type healthCheckPingPongsServer struct {
	grpc.ServerStream
}

func (x *healthCheckPingPongsServer) Send(m *Pong) error {
	return x.ServerStream.SendMsg(m)
}

func _HealthCheck_PingsPongs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HealthCheckServer).PingsPongs(&healthCheckPingsPongsServer{stream})
}

type HealthCheck_PingsPongsServer interface {
	Send(*Pong) error
	Recv() (*Ping, error)
	grpc.ServerStream
}

type healthCheckPingsPongsServer struct {
	grpc.ServerStream
}

func (x *healthCheckPingsPongsServer) Send(m *Pong) error {
	return x.ServerStream.SendMsg(m)
}

func (x *healthCheckPingsPongsServer) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HealthCheck_ServiceDesc is the grpc.ServiceDesc for HealthCheck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthCheck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "healthCheck.HealthCheck",
	HandlerType: (*HealthCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingPong",
			Handler:    _HealthCheck_PingPong_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingsPong",
			Handler:       _HealthCheck_PingsPong_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PingPongs",
			Handler:       _HealthCheck_PingPongs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PingsPongs",
			Handler:       _HealthCheck_PingsPongs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ping.proto",
}
